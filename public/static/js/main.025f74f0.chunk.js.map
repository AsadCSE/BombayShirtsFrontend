{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","fabric","sleevType","btnColor","collarBand","collarBtn","collarPolo","topaz","placket","PlacketBtn","fullSleevs","halfSleevs","sleevsBtn","cuff","cuffBtn","shirt","setShirt","className","src","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.025f74f0.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nconst App = () => {\n  const [shirt, setShirt] = useState({\n    fabric     : 'fab-02',\n    sleevType  : 'full',\n    btnColor   : 'white',\n\n    collarBand : 'collar_band_v00.png',\n    collarBtn  : 'collar_band_one_button_v00.png',\n    collarPolo : 'collar_polo_v00.png',\n    topaz      : 'side_cut_topaz_v00.png',\n    placket    : 'placket_straight_regular_v00.png',\n    PlacketBtn : 'placket_straight_regular_one_button_v00.png',\n    fullSleevs : 'sleeves_full_v00.png',\n    halfSleevs : 'sleeves_half_v00.png',\n    sleevsBtn  : 'sleeves_full_placket_button_v00.png',\n    cuff       : 'cuff_one button_angle_v00.png',\n    cuffBtn    : 'cuff_one button_buttons_v00.png'\n\n  })\n\n  return (\n    <div className=\"MainContainer\">\n      <div className=\"HeaderHolder\">\n        <div className=\"OrgName\">Shirt company</div>\n      </div>\n      <div className=\"ImageEngine\">\n        <div className=\"GenImgContainer\">\n          <div className=\"ImageBox\">\n            <img className=\"LayeredImage\" src={`/images/${shirt.fabric}/${shirt.topaz}`} />\n            <img className=\"LayeredImage\" src={`/images/${shirt.fabric}/${shirt.collarBand}`} />\n            <img className=\"LayeredImage\" src={`/images/${shirt.fabric}/${shirt.collarPolo}`} />\n            <img className=\"LayeredImage\" src={`/images/${shirt.fabric}/${shirt.placket}`} />\n            <img className=\"LayeredImage\" src={`/images/buttons/${shirt.btnColor}/${shirt.PlacketBtn}`} />\n            {\n              shirt.sleevType === 'full' ? <img className=\"LayeredImage\" src={`/images/${shirt.fabric}/${shirt.fullSleevs}`} /> : <img className=\"LayeredImage\" src={`/images/${shirt.fabric}/${shirt.halfSleevs}`} />\n            }\n            {\n              shirt.sleevType === 'full' && <img className=\"LayeredImage\" src={`/images/buttons/${shirt.btnColor}/${shirt.sleevsBtn}`} />\n            }\n            {\n              shirt.sleevType === 'full' && <img className=\"LayeredImage\" src={`/images/${shirt.fabric}/${shirt.cuff}`} />\n            }\n            {\n              shirt.sleevType === 'full' && <img className=\"LayeredImage\" src={`/images/buttons/${shirt.btnColor}/${shirt.cuffBtn}`} />\n            }\n            <img className=\"LayeredImage\" src={`/images/buttons/${shirt.btnColor}/${shirt.collarBtn}`} />\n          </div>\n        </div>\n        <div className=\"ControlBox\">\n          \n          <div className=\"fabricSelection\">\n            <div className=\"fabricSelectionTitle\">\n              Fabric Types\n            </div>\n            <div className=\"fabricSelector\">\n              <div className=\"fabricButton\" onClick={() => setShirt({...shirt, fabric:'fab-01'})}><img className=\"fabricButtonImage\" src='/images/fabTypes/fabric-01.jpg' /></div>\n              <div className=\"fabricButton\" onClick={() => setShirt({...shirt, fabric:'fab-02'})}><img className=\"fabricButtonImage\" src='/images/fabTypes/fabric-02.jpg' /></div>\n              <div className=\"fabricButton\" onClick={() => setShirt({...shirt, fabric:'fab-03'})}><img className=\"fabricButtonImage\" src='/images/fabTypes/fabric-03.jpg' /></div>\n            </div>\n          </div>\n\n          <div className=\"sleevSelection\">\n            <div className=\"sleevSelectionTitle\">\n              Sleeve Types\n            </div>\n            <div className=\"sleevSelector\">\n              <div onClick={() => setShirt({...shirt, sleevType:'half'})} className=\"sleevButton\">Half</div>\n              <div onClick={() => setShirt({...shirt, sleevType:'full'})}className=\"sleevButton\">Full</div>\n            </div>\n          </div>\n\n          <div className=\"buttonSelection\">\n            <div className=\"buttonSelectionTitle\">\n              Button color\n            </div>\n            <div className=\"buttonSelector\">\n              <div className=\"buttonButton\" onClick={() => setShirt({...shirt, btnColor:'white'})}>White</div>\n              <div className=\"buttonButton\" onClick={() => setShirt({...shirt, btnColor:'black'})}>Black</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}